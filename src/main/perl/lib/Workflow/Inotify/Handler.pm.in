package Workflow::Inotify::Handler;

use strict;
use warnings;

use parent qw/Class::Accessor::Fast/;

__PACKAGE__->mk_accessors(qw/config/);

=pod

=head1 NAME

C<Workflow::Inotify::Handler>

=head1 SYNOPSIS

 package MyHandler;

 use parent qw/Workflow::Inotify::Handler/;

 sub handler {
   my ($self, $e) = @_;

   printf("event: %s name: %s\n", $e->mask, $e->fullname); 
 }

 1;

=head1 DESCRIPTION

Base class for creating C<Linux::Inotify2> event handlers.  You use this base
class to implement a handler that responds to events generated by
I<inotify> events. Your event handlers can do pretty much anything
they want, including C<fork()> a new process.  In general, you want
your handlers to be fast and lightweight.

A typical implementation will unload, possibly filter or interpret,
then queue the event for another process to handle.  This technique
encourages a high degree of decoupling of your architecture.

=head1 METHODS

=head2 new

 new( config )

The class is instantiated by the inotify script and is passed the
config file.  Override the C<handler()> or the C<new()> method if you
choose.

=cut

sub new {
  my $class = shift;
  $class = ref($class) || $class;

  return $class->SUPER::new({config => shift});
}

=pod

=head2 handler

 handler( event );

Provide a handler to handle the Inotify event.

=over 5

=item event

An instance of C<Linux::Inotify::Event>.  See L</Linux::Inotify2>

=back

=cut

sub handler {
  my $self = shift;

  die "no handler implemented!";
}

=pod

=head2 config

 config()

Returns the configurtation read from F<inotify.cfg>.

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

L</Linux::Inotify2>

=cut

1;
